
#include "helper.h"
#include "LuaState.h"

// #include <sol/sol.hpp>

#include <cassert>
#include <iostream>

#ifndef WIN32
#include <unistd.h> // getcwd
#endif

void stackDump(lua_State* L);

using namespace std;

int hello_c(lua_State* L){
    // auto arg1 = lua_tostring(L, 1);
    auto arg1 = luaL_checkstring(L, 1);
    cout << "hello_c: " << arg1 << endl;
    return 0;
}

void error(lua_State* L, char const* fmt, ...){
    va_list argp;
    va_start(argp, fmt);
    // vfprintf(stderr, argp);
    va_end(argp);

    lua_close(L);
    exit(EXIT_FAILURE);
}


/*
** Prints an error message, adding the program name in front of it
** (if present)
*/
static void l_message (const char *pname, const char *msg) {
  if (pname) lua_writestringerror("%s: ", pname);
  lua_writestringerror("%s\n", msg);
}


/*
** Check whether 'status' is not OK and, if so, prints the error
** message on the top of the stack. It assumes that the error object
** is a string, as it was either generated by Lua or by 'msghandler'.
*/
static int report (lua_State *L, int status) {
  if (status != LUA_OK) {
    char const* progname = "lua main: ";
    const char *msg = lua_tostring(L, -1);
    l_message(progname, msg);
    lua_pop(L, 1);  /* remove message */
  }
  return status;
}

static int l_sin(lua_State* L){
    return 0;
}

int main(int argc, char** argv){
    char buf[256];
    // cout << getcwd(buf, sizeof buf - 1) << endl; // 当前工作目录
    
    LuaState L;

    luaopen_base(L); // open the basic library. print
    luaopen_table(L); // open the table library
    // luaopen_io(L); // open the I/O library
    // luaopen_string(L); // open the string lib.
    // luaopen_math(L); // open the math lib.

    // 注册函数到lua
    lua_pushcfunction(L, hello_c);
    lua_setglobal(L, "hello_c");

    int status = L.dofile("/Users/feifeigd/code/lua-5.4.4/main/main.lua");
    if(status){
        report(L, status);
        return 1;
    }
    // 调用lua函数
    L.call("hello", nullptr, 1, .01, "abc");

    
    lua_pushglobaltable(L);
    stackDump(L);
    if(lua_vnpcall(L, nullptr, "hello", nullptr, nullptr)){
        return 1;
    }
    stackDump(L);

    /*sol::state lua;
    lua.open_libraries(); // 打开全部
    lua.safe_script_file("/Users/feifeigd/code/lua-5.4.4/main/main.lua");
    lua_pushboolean(lua, true);
    stackDump(lua);
    int x = 0;
    lua.set_function("beep", [&x]{++x;});
    lua.script("beep()");
    assert(1 == x);*/
    return 0;
}
